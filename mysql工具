mysqldump：

在使用mysqldump获取一致性备份时，我们经常会使用两个参数，--single-transaction和--master-data，前者保证innodb表的数据一致性，
后者保证获取与数据备份匹配的一致性位点，主要用于搭建复制。现在使用mysql主备集群基本是标配，所以也是必需的。
对于myisam，就需要通过--lock-all-tables参数和--master-data来达到同样的目的。

--single-transaction
快照读，基于RR隔离级别显示开启事务然后select，dump的是开启事务也就是备份开始时的那个时间点的快照（使用mvcc，读undo log里的版本）
dump时其他连接不可以使用这些命令： ALTER TABLE, CREATE TABLE, DROP TABLE, RENAME TABLE, TRUNCATE TABLE. 
To dump large tables, combine the --single-transaction option with the --quick option.

--master-data
 It causes the dump output to include a CHANGE MASTER TO statement that indicates the binary log coordinates (file name and position) 
 of the dumped server. 
 
 官方版本的5.5和5.6对于mysqldump做了一个优化，主要改动是，5.5备份一个表，锁一个表，备份下一个表时，再上锁一个表，
 已经备份完的表锁不释放，这样持续进行，直到备份完成才统一释放锁。5.6则是备份完一个表，就释放一个锁，实现主要是通过innodb的保存点机制。
 相关的bug可以参考链接：http://bugs.mysql.com/bug.php?id=71017。



--------------------------------------------------------------------------------------------------------------------------
mha:
https://code.google.com/p/mysql-master-ha/wiki/TableOfContents?tm=6
http://www.slideshare.net/matsunobu/automated-master-failover

https://github.com/ovaistariq/mha-helper
http://www.ovaistariq.net/911/extend-mysql-master-ha-mha-capabilities-with-mha-helper/#.Vw-WsPl97IU




--------------------------------------------------------------------------------------------------------------------------------


mysqlbinlog

mysqladmin




mysqlpump
mk-slave-prefetch

----------------------------------------------------------------------------------------------------
percona的工具集

安装：
wget https://www.percona.com/downloads/percona-toolkit/2.2.14/RPM/percona-toolkit-2.2.14-1.noarch.rpm
    如果：
    error: Failed dependencies:
        perl(IO::Socket::SSL) is needed by percona-toolkit-2.2.14-1.noarch
        perl(Term::ReadKey) is needed by percona-toolkit-2.2.14-1.noarch
 yum install perl-IO-Socket-SSL（一般perl的依赖，直接把perl(IO::Socket::SSL)用连字符接上即可）
 wget http://pkgs.repoforge.org/perl-TermReadKey/perl-TermReadKey-2.30-3.el6.rfx.x86_64.rpm
 rpm -ivh perl-TermReadKey-2.30-3.el6.rfx.x86_64.rpm
 rpm -ivh percona-toolkit-2.2.14-1.noarch.rpm
 rpm -ql percona-toolkit（查看安装分布）
 
 
 使用：
 http://www.cnblogs.com/zhoujinyi/archive/2013/05/09/3067045.html
 
 ------------------------------------------------------------------------------------------------------------------------
 运维类：
 0.
 pt-kill
从show processlist 中获取满足条件的连接或者从包含show processlist的文件中读取满足条件的连接并打印或者杀掉或者执行其他操作，

每隔10s 杀掉处于sleep状态的连接数；
pt-kill --defaults-file xx --match-command Sleep --kill --victims all --interval 10 
每隔10s 杀掉处初步runnning状态超过60s的连接数；
pt-kill defaults-file xx --busy-time 60 --kill --victims all --interval 10 

1. 按user kill
/usr/bin/pt-kill --busy-time 15   --match-user="dbUSER1 | dbUSER2,..." --victim all --interval 1 --kill --daemonize 
--pid=/tmp/ptkill.pid --print --log=/home/pt-kill.log  
注：测试通过按用户来杀线程，注意--match-user多个用户之间用 | 分隔。 

2. 按query来源 host kill
/usr/bin/pt-kill --busy-time 15   --match-host="192.168.10.10 | 192.168.10.11" --victim all --interval 1 --kill --daemonize 
--pid=/tmp/ptkill.pid --print --log=/home/pt-kill.log
--ignore-host    / --match-host
  注：测试通过按来源host来杀线程，注意--match-host多个host之间用 | 分隔。 

3. 按command kill
/usr/bin/pt-kill --busy-time 15   --match-command="query | Execute" --victim all --interval 1 --kill --daemonize 
--pid=/tmp/ptkill.pid --print --log=/home/pt-kill.log
/usr/bin/pt-kill --busy-time 15   --ignore-command="sleep | binlogdump" --victim all --interval 1 --kill --daemonize 
--pid=/tmp/ptkill.pid --print --log=/home/pt-kill.log
注：测试通过按command来杀掉线程，注意command的内容一定要严格匹配大小写，否则会杀不掉。 注意--match-command多个command之间用 | 分隔，
否则会失效。
（command有：Query、Sleep、Binlog Dump、Connect、Delayed insert、Execute、Fetch、Init DB、Kill、Prepare、Processlist、Quit、
Reset stmt、Table Dump）

4. 按state kill
/usr/bin/pt-kill --busy-time 15 --match-state="Locked | Sending data" --victim all --interval 1 --kill --daemonize 
--pid=/tmp/ptkill.pid --print --log=/home/pt-kill.log
注：测试通过按state 来杀掉线程，注意state 的内容一定要严格匹配大小写，否则会杀不掉。注意--match-state多个state之间用 | 分隔，否则会失效。
（state类型有：Locked、login、copy to tmp table、Copying to tmp table、Copying to tmp table on disk、Creating tmp table、executing、
Reading from net、Sending data、Sorting for order、Sorting result、Table lock、Updating）

5. 按info关键字 kill
/usr/bin/pt-kill --busy-time 15 --match-info="SELECT | DELETE" --victim all --interval 1 --kill --daemonize 
--pid=/tmp/ptkill.pid --print --log=/home/pt-kill.log
注：测试通过按info来杀掉线程，注意info的内容一定要严格匹配大小写，否则会杀不掉。注意--match-info多个info之间用 | 分隔，否则会失效。
--ignore-info    / --match-info
（info可以使用select、update、insert、delete来进行匹配，并可使用"|"进行多项匹配，如"select|SELECT|delete|DELETE|update|UPDATE"

6. 按访问的dbname kill
/usr/bin/pt-kill --busy-time 15 --match-db="db1 | db2"  --victim all --interval 1 --kill --daemonize 
--pid=/tmp/ptkill.pid --print --log=/home/pt-kill.log
 --ignore-db  / --match-db
注：测试通过按db来杀掉线程，注意db的内容一定要严格匹配大小写，否则会杀不掉。注意--match-db多个db之间用 | 分隔，否则会失效。


另： Action：
--kill                      杀掉连接并且退出
--kill-query           只杀掉连接执行的语句，但是线程不会被终止

几个重要参数
--daemonize  放在后台以守护进程的形式运行；
--interval  多久运行一次，单位可以是s,m,h，d等默认是s
--victims 默认是oldest,只杀最古老的查询。这是防止被查杀是不是真的长时间运行的查询，他们只是长期等待。这种种匹配按时间查询，
杀死一个时间最高值。
 
 
 1,pt-table-checksum:
 检查主从一致性
 pt-table-checksum --nocheck-replication-filters --chunk-size=1000000 --no-check-binlog-format --replicate=sps.checksums 
 --databases=xxx h=127.0.0.1,u=root,p=123456,P=3306  
 
 
pt-table-sync
高效同步 mysql 表的数据，与pt-table-checksum 结合使用
pt-table-sync [OPTION...] DSN [DSN...]
原理：总是在主上执行数据的更改，再同步到从上，不会直接更改成从的数据，在主上执行更改是基于主上现在的数据，不会更改主上的数据。
注意使用之前先备份你的数据，避免造成数据的丢失.执行execute 之前最好先换成–print 或–dry-run 查看一下会变更哪些数据。

范例 1：同步192.168.3.135 的test 库的 aaa 表到 192.168.3.92，在执行之前可以用–execute 参数换成–print 来查看会变更什么东西，
后面那个主机必须是master，否则会报错推出。
pt-table-sync --execute --user=root --password=hugnew h=192.168.3.135,D=test,t=aaa h=192.168.3.92

范例 2： 将主的 test 数据库同步到192.168.3.92，使从上具有一样的数据。
pt-table-sync --execute --sync-to-master --user=root --password=hugnew h=192.168.3.92 --database test
范例 3：只同步指定的表
pt-table-sync --execute --sync-to-master --user=root --password=hugnew h=192.168.3.92 D=test,t=aaa
范例 4：根据 pt-table-checksum 的结果进行数据同步
pt-table-sync --execute --replicate test.checksums --user=root --password=hugnew h=192.168.3.135
范例 5： 根据 pt-table-checksum 使从的数据和主的数据一致
pt-table-sync --execute --replicate test.checksums --user=root --password=hugnew --sync-to-master h=192.168.3.92 D=test,t=aaa
 
 
 
2,pt-online-schema-change：
在线更改表结构，不锁表
使用风险：
一定要阅读了工具的文档，知道工具的原理，限制，工具的工作过程
查看一下工具已知的bug列表，做到心中有数
在准生产环境上测试一遍工具，预跑一下
在生产环境上操作时，先备份先生产环境的数据（对于数据的备份是一直要做且有的，且验证备份）

例子：
pt-online-schema-change [OPTIONS] DSN
options 可以自行查看 help， DNS 为你要操作的数据库和表。
--dry-run and --execute 是互斥的，不可同时使用。

–execute 这个参数的作用和工作原理的介绍的一样，会建立触发器，来保证最新变更的数据会影响至新表。
注意：如果不加这个参数，这个工具会在执行一些检查后退出。这一举措是为了让使用这充分了解了这个工具的原理，同时阅读了官方文档。

使用示例：
范例 1： 在线更改表的的引擎，这个尤其在整理 innodb 表的时候非常有用，示例如下：
pt-online-schema-change --user=root --password=hugnew --host=localhost
                        --lock-wait-time=120 --alter="ENGINE=InnoDB" D=test,t=oss_pvinfo2 --execute
范例 2： 大表添加字段的，语句如下:
pt-online-schema-change --user=root --password=hugnew --host=localhost 
                        --lock-wait-time=120 --alter="ADD COLUMN domain_id INT" D=test,t=oss_pvinfo2 --execute
 
 
3, pt-slave-find
查找和打印 mysql 所有从服务器复制层级关系
pt-slave-find [OPTION...] MASTER-HOST
原理:连接 mysql 主服务器并查找其所有的从，然后打印出所有从服务器的层级关系。

范例 1：查找主服务器为 192.168.3.135的mysql有所有从的层级关系：
pt-slave-find --user=root --password=hugnew --host=192.168.3.13

 --------------------------------------------------------------------------------------------------------------------
监控类：
 
1,pt-deadlock-logger
提取和记录 mysql 死锁的相关信息
pt-deadlock-logger [OPTION...] SOURCE_DSN
收集和保存 mysql 上最近的死锁信息，可以直接打印死锁信息和存储死锁信息到数据库中死锁信息包括发生死锁的服务器、
最近发生死锁的时间、死锁线程id、死锁的事务 id、发生死锁时事务执行了多长时间等等非常多的信息。详情见下面的示例。

范例 1： 打印本地 mysql 的死锁信息
pt-deadlock-logger --user=root --password=hugnew h=localhost –print
范例 2：将本地的 mysql 死锁信息记录到数据库的表中，也打印出来
pt-deadlock-logger --user=root --password=hugnew h=localhost --print D=test,t=deadlocks


2,pt-query-digest
 
 ----------------------------------------------------------------------------------------------------------------------
 性能优化类：

pt-visual-explain
格式化 explain 出来的执行计划按照tree 方式输出，方便阅读。

pt-variable-advisor
分析 mysql 的参数变量，并对可能存在的问题提出建议
 
 ------------------------------------------------------------------------------------------------------------------------
 实用方便类：
 
pt-show-grants
规范化和打印mysql 权限，让你在复制、比较mysql 权限以及进行版本控制的时候更有效率！
 
 
 pt-duplicate-key-checker
 检查重复索引和外键
 
pt-summary:
  打印出来的信息包括：CPU、内存、硬盘、网卡等信息，还包括文件系统、磁盘调度和队列大小、LVM、RAID、网络链接信息、netstat 的统计，
  以及前10的负载占用信息和vmstat信息。
  
  
pt-mysql-summary --user=root --password=123456 --host=192.168.200.25 --port=3306
  打印出来的信息包括：版本信息、数据目录、命令的统计、用户，数据库以及复制等信息还包括各个变量（status、variables）信息和
  各个变量的比例信息，还有配置文件等信息。

---------------------------------------------------------------------------------------------------------

自动化审核
inception

安装：
yum -y install cmake  libncurses5-dev libssl-dev g++ bison openssl-devel.x86_64 git ncurses-devel
git  clone https://github.com/mysql-inception/inception.git
./inception_build.sh debug（指定为debug目录）  

启动：
nohup ./Inception --port=6669 &
登录验证：
mysql -uroot -h127.0.0.1 -P6669 
inception get variables;

----------------------------------------------------
inception web

安装：
需要Python2.7环境
git clone https://github.com/dbalihui/inception_web.git
pip install flask_wtf flask-script flask-debugtoolbar MySQL-python argparse
修改配置 app/inception.py 

启动：
./run.py runserver --host 0.0.0.0

------------------------------------------------------------------------------------------------------------------------------

复制拓扑可视化
https://github.com/outbrain/orchestrator

异构数据同步：
https://github.com/siddontang/go-mysql
