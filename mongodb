


mongos:
The mongos process is used only in sharding

mongodb-org	A metapackage that will automatically install the four component packages listed below.
mongodb-org-server	Contains the mongod daemon and associated configuration and init scripts.
mongodb-org-mongos	Contains the mongos daemon.
mongodb-org-shell	Contains the mongo shell.
mongodb-org-tools	Contains the following MongoDB tools: mongoimport bsondump, mongodump, mongoexport,
                                                        mongofiles, mongooplog, mongoperf, mongorestore, mongostat, and mongotop.

--------------------------------------------------------------------------------------------------------------------
安装：
vim /etc/yum.repos.d/mongodb-org-3.2.repo

[mongodb-org-3.2]
name=MongoDB Repository
baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.2/x86_64/
gpgcheck=0
enabled=1

end vim  3.2版本

vim /etc/yum.repos.d/mongodb-org-3.0.repo

[mongodb-org-3.0]
name=MongoDB Repository
baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.0/x86_64/
gpgcheck=0
enabled=1

end vim 3.0版本

yum install -y mongodb-org

如果想开机自启动：
chkconfig mongod on

----------------------------------------------------------------------------------------------------------------
删除：

删除程序
yum erase $(rpm -qa | grep mongodb-org)

删除数据和日志
rm -r /var/log/mongodb
rm -r /var/lib/mongo

------------------------------------------------------------------------------------------------------------
配置：
The MongoDB instance stores its data files in /var/lib/mongo and its log files in /var/log/mongodb by default,
and runs using the mongod user account. You can specify alternate log and data file directories in /etc/mongod.conf. 
See systemLog.path and storage.dbPath for additional information.
If you change the user that runs the MongoDB process, you must modify the access control rights to the /var/lib/mongo 
and /var/log/mongodb directories to give this user access to these directories.

-------------------------------------------------------------------------------------------------------------
管理：

使用service方式管理
service mongod start   


-----------------------------------------------------------------------------
使用：
理解object id  不是一个字符串

MongoDB stores data in bson format，bson strings are utf-8 encodeed

mongodb is schema-free


命令：

登录：
mongo hostname/pull   -u rice -p rice  --authenticationDatabase pull
mongo -u rice -p rice --port 27017 --authenticationDatabase pull （注意authenticationDatabase的概念）
mongo mongodb://user:password@ip:27017/


db.shenwan_industry.drop()               删除集合
db.swIndustryAshare_old.find()           列集合所有文档
db.swIndustryAshare_old.find().count()   集合中所有文档计数

--------------------------------------------------------------------------------------------------------------------------------
查询例子：

模糊查询：
db.collection.find({name:{$regex:/j*k/,$options:"si"}})

or查询
db.collection_name.find({"date" : ISODate("2016-12-28T00:00:00Z"), $or:[{"index_code":/^80/},{"index_code":/^85/}]}, {"index_code": 1})
like sql: select index_code from collection_name where date = "2016-12-28 00:00:00" and index_code = 80 or index_code = 85;

and查询
db.inventory.find( { $and: [ { price: { $ne: 1.99 } }, { price: { $exists: true } } ] } )

去重查询
$group 操作符
$加字段名 做field path
db.collection.aggregate([{'$group' :{'_id': {"ThirdIndustryCode": '$ThirdIndustryCode', "ThirdIndustryName": "$ThirdIndustryName"}}
}]):

$eq  等值查询
$ne  不等于查询
$lt  小于查询
$lte 小于等于
$gt  大于
$gte 大于等于

$in  in查询
example：
{ _id: 1, item: "abc", qty: 10, tags: [ "school", "clothing" ], sale: false }

Then, the following update() operation will set the sale field value to true where the tags field holds an array with at least
one element matching either "appliances" or "school".

db.inventory.update(
                     { tags: { $in: ["appliances", "school"] } },
                     { $set: { sale:true } }
                   )
                   
$nin not in 查询
$or  or查询


$exists mongodb里判断列是否存在，因为mongodb时schema free，所以不是每个行都有一样的列。这个$exists与sql里的exists要注意对比，sql里的exists是
至少会返回一行数据，就是说判断是否有一行数据存在。

比如在Northwind数据库中有一个查询为
SELECT c.CustomerId,CompanyName FROM Customers c
WHERE EXISTS(
SELECT OrderID FROM Orders o WHERE o.CustomerID=c.CustomerID) 
这里面的EXISTS是如何运作呢？子查询返回的是OrderId字段，可是外面的查询要找的是CustomerID和CompanyName字段，这两个字段肯定不在OrderID里面啊，
这是如何匹配的呢？ 
EXISTS用于检查子查询是否至少会返回一行数据，该子查询实际上并不返回任何数据，而是返回值True或False

db.inventory.find( { qty: { $exists: true, $nin: [ 5, 15 ] } } )
This query will select all documents in the inventory collection where the qty field exists and its value does not equal 5 or 15.

匹配字段是否是某个类型：
$type selects the documents where the value of the field is an instance of the specified BSON type(s). Querying by data type is 
useful when dealing with highly unstructured data where data types are not predictable.

db.addressBook.find( { "zipCode" : { $type : 1 } } )
db.addressBook.find( { "zipCode" : { $type : "double" } } )
db.addressBook.find( { "zipCode" : { $type : 2 } } );
db.addressBook.find( { "zipCode" : { $type : "string" } } );
the detail list ：https://docs.mongodb.com/manual/reference/operator/query/type/#document-querying-by-data-type

复合查询列子：
db.swIndustryAshare_new.find( {"CancelDate" :{$not: { $type : 10 } } }, {"CancelDate": 1, "_id": 0, "ThirdIndustryName": 1} ).sort({"CancelDate": -1})
取出CancelDate 不为空，按CancelDate排序




索引：
查看索引
MongoDB提供了查看索引信息的方法：
getIndexes()方法可以用来查看集合的所有索引，
totalIndexSize()查看集合索引的总大小，
db.system.indexes.find()查看数据库中所有索引信息。

创建索引语法结构
db.COLLECTION_NAME.ensureIndex(keys[,options])
keys，要建立索引的参数列表。如：{KEY:1}，其中key表示字段名，1表示升序排序，也可使用使用数字-1降序。
options，可选参数，表示建立索引的设置。可选值如下：
background，Boolean，在后台建立索引，以便建立索引时不阻止其他数据库活动。默认值 false。
unique，Boolean，创建唯一索引。默认值 false。
name，String，指定索引的名称。如果未指定，MongoDB会生成一个索引字段的名称和排序顺序串联。
dropDups，Boolean，创建唯一索引时，如果出现重复删除后续出现的相同索引，只保留第一个。
sparse，Boolean，对文档中不存在的字段数据不启用索引。默认值是 false。
v，index version，索引的版本号。
weights，document，索引权重值，数值在 1 到 99,999 之间，表示该索引相对于其他索引字段的得分权重。

为集合sites建立索引：
> db.sites.ensureIndex({name: 1, domain: -1})

删除集合sites中名为"name_1_domain_-1"的索引：
> db.sites.dropIndex("name_1_domain_-1")

删除集合sites中所有的索引：
> db.sites.dropIndexes()



为了方便mongodb里存时间 最好统一用字符串类型


-------------------------------------------------------------------------------------------
数据格式：
db.swIndustryAshare_old.find()
{ "_id" : ObjectId("5a783ec61a46134c6de2deb3"), "SecondIndustryIndxCode" : "801164.INDX", "SecondIndustryName" : "水务", "FirstIndustryCode" : "410000", "InfoPubDate" : ISODate("2004-04-01T00:00:00Z"), "FirstIndustryName" : "公用事业", "CancelDate" : null, "ThirdIndustryIndxCode" : "851621.INDX", "ThirdIndustryCode" : "410201", "ModifiedTime" : ISODate("2017-09-01T22:21:14Z"), "UpdateTime" : "2018-02-05 19:23:45", "SecondIndustryCode" : "410200", "ThirdIndustryName" : "水务", "STOCKCODE" : "600008.XSHG", "FirstIndustryIndxCode" : "801160.INDX" }
{ "_id" : ObjectId("5a783ec61a46134c6de2deb4"), "SecondIndustryIndxCode" : "801174.INDX", "SecondIndustryName" : "机场", "FirstIndustryCode" : "420000", "InfoPubDate" : ISODate("1998-02-18T00:00:00Z"), "FirstIndustryName" : "交通运输", "CancelDate" : null, "ThirdIndustryIndxCode" : "851751.INDX", "ThirdIndustryCode" : "420501", "ModifiedTime" : ISODate("2017-09-01T22:21:14Z"), "UpdateTime" : "2018-02-05 19:23:45", "SecondIndustryCode" : "420500", "ThirdIndustryName" : "机场", "STOCKCODE" : "600009.XSHG", "FirstIndustryIndxCode" : "801170.INDX" }
{ "_id" : ObjectId("5a783ec61a46134c6de2deb5"), "SecondIndustryIndxCode" : "801041.INDX", "SecondIndustryName" : "钢铁", "FirstIndustryCode" : "230000", "InfoPubDate" : ISODate("2001-02-22T00:00:00Z"), "FirstIndustryName" : "黑色金属", "CancelDate" : null, "ThirdIndustryIndxCode" : "850411.INDX", "ThirdIndustryCode" : "230101", "ModifiedTime" : ISODate("2017-09-01T22:21:14Z"), "UpdateTime" : "2018-02-05 19:23:45", "SecondIndustryCode" : "230100", "ThirdIndustryName" : "普钢", "STOCKCODE" : "600010.XSHG", "FirstIndustryIndxCode" : "801040.INDX" }
{ "_id" : ObjectId("5a783ec61a46134c6de2deb6"), "SecondIndustryIndxCode" : "801161.INDX", "SecondIndustryName" : "电力", "FirstIndustryCode" : "410000", "InfoPubDate" : ISODate("2001-12-06T00:00:00Z"), "FirstIndustryName" : "公用事业", "CancelDate" : null, "ThirdIndustryIndxCode" : "851611.INDX", "ThirdIndustryCode" : "410101", "ModifiedTime" : ISODate("2017-09-01T22:21:14Z"), "UpdateTime" : "2018-02-05 19:23:45", "SecondIndustryCode" : "410100", "ThirdIndustryName" : "火电", "STOCKCODE" : "600011.XSHG", "FirstIndustryIndxCode" : "801160.INDX" }
{ "_id" : ObjectId("5a783ec61a46134c6de2deb7"), "SecondIndustryIndxCode" : "801175.INDX", "SecondIndustryName" : "高速公路", "FirstIndustryCode" : "420000", "InfoPubDate" : ISODate("2003-01-07T00:00:00Z"), "FirstIndustryName" : "交通运输", "CancelDate" : null, "ThirdIndustryIndxCode" : "851731.INDX", "ThirdIndustryCode" : "420201", "ModifiedTime" : ISODate("2017-09-01T22:21:14Z"), "UpdateTime" : "2018-02-05 19:23:45", "SecondIndustryCode" : "420200", "ThirdIndustryName" : "高速公路", "STOCKCODE" : "600012.XSHG", "FirstIndustryIndxCode" : "801170.INDX" }

db.swIndustryAshare_new.find()
{ "_id" : ObjectId("5a783ee31a46134c89058780"), "FirstIndustryIndxCode" : "801160.INDX", "FirstIndustryCode" : "410000", "SecondIndustryIndxCode" : "801161.INDX", "STOCKCODE" : "600021.XSHG", "SecondIndustryCode" : "410100", "InfoPubDate" : ISODate("2014-01-01T00:00:00Z"), "UpdateTime" : "2018-02-05 19:24:14", "ModifiedTime" : ISODate("2014-01-06T06:51:10Z"), "SecondIndustryName" : "电力", "ThirdIndustryCode" : "410101", "ThirdIndustryName" : "火电", "FirstIndustryName" : "公用事业", "ThirdIndustryIndxCode" : "851611.INDX", "CancelDate" : null }
{ "_id" : ObjectId("5a783ee31a46134c89058781"), "FirstIndustryIndxCode" : "801170.INDX", "FirstIndustryCode" : "420000", "SecondIndustryIndxCode" : "801176.INDX", "STOCKCODE" : "600026.XSHG", "SecondIndustryCode" : "420600", "InfoPubDate" : ISODate("2014-01-01T00:00:00Z"), "UpdateTime" : "2018-02-05 19:24:14", "ModifiedTime" : ISODate("2014-01-06T06:51:10Z"), "SecondIndustryName" : "航运", "ThirdIndustryCode" : "420601", "ThirdIndustryName" : "航运", "FirstIndustryName" : "交通运输", "ThirdIndustryIndxCode" : "851761.INDX", "CancelDate" : null }
{ "_id" : ObjectId("5a783ee31a46134c89058782"), "FirstIndustryIndxCode" : "801030.INDX", "FirstIndustryCode" : "220000", "SecondIndustryIndxCode" : "801035.INDX", "STOCKCODE" : "600028.XSHG", "SecondIndustryCode" : "220100", "InfoPubDate" : ISODate("2014-01-01T00:00:00Z"), "UpdateTime" : "2018-02-05 19:24:14", "ModifiedTime" : ISODate("2014-01-06T06:51:10Z"), "SecondIndustryName" : "石油化工", "ThirdIndustryCode" : "220101", "ThirdIndustryName" : "石油加工", "FirstIndustryName" : "化工", "ThirdIndustryIndxCode" : "850311.INDX", "CancelDate" : null }
{ "_id" : ObjectId("5a783ee31a46134c89058783"), "FirstIndustryIndxCode" : "801170.INDX", "FirstIndustryCode" : "420000", "SecondIndustryIndxCode" : "801173.INDX", "STOCKCODE" : "600029.XSHG", "SecondIndustryCode" : "420400", "InfoPubDate" : ISODate("2014-01-01T00:00:00Z"), "UpdateTime" : "2018-02-05 19:24:14", "ModifiedTime" : ISODate("2014-01-06T06:51:10Z"), "SecondIndustryName" : "航空运输", "ThirdIndustryCode" : "420401", "ThirdIndustryName" : "航空运输", "FirstIndustryName" : "交通运输", "ThirdIndustryIndxCode" : "851741.INDX", "CancelDate" : null }

db.index_comp_weights.find()
{ "_id" : ObjectId("5a796a351a4613450be9ab9a"), "index_code" : "801091", "data" : [ { "order_book_id" : "000017.XSHG", "weight" : 0.374476 }, { "order_book_id" : "000913.XSHG", "weight" : 0.599493 }, { "order_book_id" : "600099.XSHG", "weight" : 0.49521 }, { "order_book_id" : "600262.XSHG", "weight" : 0.675664 }, { "order_book_id" : "600391.XSHG", "weight" : 0.778577 }, { "order_book_id" : "600677.XSHG", "weight" : 1.431703 }, { "order_book_id" : "600877.XSHG", "weight" : 1.575762 }, { "order_book_id" : "600990.XSHG", "weight" : 0.625353 }, { "order_book_id" : "002297.XSHG", "weight" : 0.911299 }, { "order_book_id" : "300101.XSHG", "weight" : 1.931439 }, { "order_book_id" : "001696.XSHG", "weight" : 2.540014 }, { "order_book_id" : "000920.XSHG", "weight" : 1.145803 }, { "order_book_id" : "600118.XSHG", "weight" : 5.180625 }, { "order_book_id" : "600316.XSHG", "weight" : 4.641692 }, { "order_book_id" : "600435.XSHG", "weight" : 2.042912 }, { "order_book_id" : "600685.XSHG", "weight" : 2.257974 }, { "order_book_id" : "600879.XSHG", "weight" : 3.691532 }, { "order_book_id" : "002105.XSHG", "weight" : 0.377117 }, { "order_book_id" : "601989.XSHG", "weight" : 12.372957 }, { "order_book_id" : "300123.XSHG", "weight" : 0.57191 }, { "order_book_id" : "000738.XSHG", "weight" : 0.915396 }, { "order_book_id" : "600038.XSHG", "weight" : 1.800627 }, { "order_book_id" : "600150.XSHG", "weight" : 5.197136 }, { "order_book_id" : "600343.XSHG", "weight" : 1.010804 }, { "order_book_id" : "600495.XSHG", "weight" : 1.564596 }, { "order_book_id" : "600698.XSHG", "weight" : 1.077125 }, { "order_book_id" : "600893.XSHG", "weight" : 5.109605 }, { "order_book_id" : "002151.XSHG", "weight" : 1.138835 }, { "order_book_id" : "601299.XSHG", "weight" : 8.004489 }, { "order_book_id" : "601890.XSHG", "weight" : 1.74521 }, { "order_book_id" : "000768.XSHG", "weight" : 5.774033 }, { "order_book_id" : "600072.XSHG", "weight" : 3.316257 }, { "order_book_id" : "600184.XSHG", "weight" : 1.136315 }, { "order_book_id" : "600372.XSHG", "weight" : 3.035131 }, { "order_book_id" : "600523.XSHG", "weight" : 0.964948 }, { "order_book_id" : "600760.XSHG", "weight" : 1.676058 }, { "order_book_id" : "600967.XSHG", "weight" : 1.458572 }, { "order_book_id" : "601766.XSHG", "weight" : 9.704809 }, { "order_book_id" : "300008.XSHG", "weight" : 0.555329 }, { "order_book_id" : "002608.XSHG", "weight" : 0.593212 } ], "date" : "2012-01-01 00:00:00" }



mysql> select count(*) from shenwan_industry_hierarchy;
+----------+
| count(*) |
+----------+
|      678 |
+----------+
1 row in set (0.00 sec)

mysql> select count(*) from index_industry_relationship;
+----------+
| count(*) |
+----------+
|      687 |
+----------+
1 row in set (0.00 sec)
