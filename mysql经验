选型：
用5.6的建议用>5.6.23，否则用小版本，升级挺麻烦的；

---------------------------------------------------------------------------------------------------------
MySQL误删除数据之后的恢复

下午的时候开发人员直接在没有备份的情况下删除了一些重要的数据，幸亏我们有使用xtrabackup对数据库每天备份一次
（我们的binlog_format是statement，如果是row的话，delete语句会在binlog中记录有之前的信息可以用来进行恢复，这也是row format的一个优点）。

下面简要的说下恢复的步骤，希望对一些朋友有所帮助。
一、开发人员的delete语句
delete数据之前最好先select一下，select review这些数据确实是自己需要删除的数据，之后再备份一下，然后就可以删除了。否则删掉之后，
让DBA来用备份恢复，这个真的非常耗时，而且很费力。最好的就是把删除操作做成一个工具，工具来强制备份，
依靠人而不是工具或者制度就跟我党一样不靠谱。

mysql#20> delete from acl_permission where name not in ('mtupm', 'mtsg', 'mtoa', 'mtgis', 'mtks', 'mtpmc', 'mtdeal') and id > 0;
Query OK, 28 rows affected (0.01 sec)
二、启动xtrabackup的备份数据
备份目录的位置是/opt/backup/db/db34，最好在appy之后再备份一次。
首先使用innobackupex进行apply-log，xtrabackup会对copy的redolog进行innodb标准的crash-recovery操作；使用use-memory可以加快apply-log的速度
innobackupex –apply-log –use-memory=4g ./
chown -R mysql:mysql /opt/backup/db/db34

修改mysql的配置文件/etc/my.cnf，添加上backup-my.cnf中的内容，注意最后一行的replicate-do-table=upm.acl_permission，为了加快恢复的速度，
因此只需要恢复出问题的表即可。

[mysqld5004]
port=5004
datadir=/opt/backup/db/db34
innodb_data_home_dir=/opt/backup/db/db34
innodb_log_group_home_dir=/opt/backup/db/db34
pid-file=/opt/backup/db/db34/mysql.pid
socket=/opt/tmp/mysql5004.sock
innodb_locks_unsafe_for_binlog=1
server_id=5004
innodb_support_xa=0
innodb_data_file_path=ibdata1:100M:autoextend
innodb_log_files_in_group=3
innodb_log_file_size=1073741824
innodb_fast_checksum=0
innodb_page_size=16384
innodb_log_block_size=512
replicate-do-table=upm.acl_permission
启动备份示例

mysqld_multi start 5004 --no-log
三、寻找破坏位置
根据开发提供的删除操作的时间，来找到binlog的位置点，找到之后往前退一个。
mysql-bin.004105
at 526974047

# at 526974470
#130718 15:26:41 server id 185  end_log_pos 526974657   Query   thread_id=156517709     exec_time=0     error_code=0
use upm/*!*/;
SET TIMESTAMP=1374132401/*!*/;
delete  from acl_permission where name not in ('mtupm', 'mtsg', 'mtoa', 'mtgis', 'mtks', 'mtpmc', 'mtdeal') and id > 0
/*!*/;
四、同步数据
通过start slave until master_log_file的功能将slave同步到出问题操作的前一步

[localhost][admin]@(none)04:34:19>start slave until master_log_file='mysql-bin.004105',master_log_pos=526974047;
五、恢复数据
同步追上之后，就可以使用mysqldump将数据迁移到线上服务，整个恢复操作就结束了。

--------------------------------------------------------------------------------------------------------------------------------

GTID:

在整个复制拓扑结构内，每个事务拥有自己全局唯一标识，,每个GTID对应一个事务;。
GTID包含两个部分，一部分是实例的UUID，另一部分是实例内递增的整数，GTID = server_uuid:transaction_id。
注：第一次启动mysql会生成server_uuid并存于数据目录的auto.cnf；


参数：
gtid_mode,enforce_gtid_consistency

gtid_next,gtid_executed,gtid_purged,gtid_owned

GTID_EXECUTED：表示已经在该实例上执行过的事务； 执行RESET MASTER 会将该变量置空; 
               们还可以通过设置GTID_NEXT执行一个空事务，来影响GTID_EXECUTED

GTID_PURGED：已经被删除的binlog的事务，它是GTID_EXECUTED的子集

GTID_OWNED:  表示正在执行的事务的gtid以及对应的线程ID。

GTID_NEXT：  SESSION级别变量，表示下一个将被使用的GTID




流程
1 主库执行事务，分配GTID并记入binlog；
2 slave解析binlog，将GTID赋给gtid_next并于下一个事务使用此GTID，gtid_next位于session context；
3 slave使用GTID前先做检查，确保其既没有被使用过(gtid_executed)， 也没有被其他session正在使用(gtid_owned)，
多个客户端不可并发运行同一个事务；

启动配置：
5.6版本，gtid_mode=ON,--log-bin,log_slave_updates,enforce_gtid_consistency 均要开启

搭建过程：
1,
SET @@global.read_only = ON; (both servers)
2,
allow the slave to catch up with the master.  make sure the slave has processed all updates before continuing.
3,
mysqladmin -uusername -p shutdown(both servers)
4,
配置setup option，--gtid_mode=ON --log-bin --log-slave-updates --enforce-gtid-consistency。并在从库上指定 --skip-slave-start。启动mysql
#GTID
server-id=
log-bin  
log-slave-updates=ON
gtid_mode=ON
enforce-gtid-consistency=ON
5，
加从库权限
GRANT RELOAD, SUPER, REPLICATION SLAVE ON *.* TO 'rep'@'10.3.19.166' IDENTIFIED BY  '';
CHANGE MASTER TO MASTER_HOST = host,MASTER_PORT = port,MASTER_USER = user,MASTER_PASSWORD = password,MASTER_AUTO_POSITION = 1;
（If MASTER_AUTO_POSITION = 1 is used with CHANGE MASTER TO, the slave attempts to connect to the master 
using the GTID-based replication protocol. ）
6，
START SLAVE;
7，
SET @@global.read_only = OFF;（on master）


注意事项：
MySQL 5.6 GTID，
尽量使用purge master log来删除binlog。如果手工清理的话，记得把auto.cnf也清理掉。
否则备库会发现uuid:1的我已经执行过了，不会继续执行，事务就会丢失了

5.6GTID集群的配置需要停服，因为gtid_mode不能热更改，且集群内所有的gtid_mode都要设置为on
Facebook,Booking.com,Percona都对此通过patch做了优化，做到了更优雅的升级

5.6GTID开启后，会把slave crash safe 这个5.6开始支持的功能给fire掉。


GTID空洞（或者说有间隙）：
在 MySQL 5.6及以上版本中，我们强烈建议启用 MASTER_AUTO_POSITION = 1，让 MySQL 自己去做判断，减少一些不必要的问题，
并且采用双主（其中一个主设为只读）的方式，方便两个主之间可以随意相互切换，而不必担心数据不一致。


跳过复制错误：
使用空事务的方法跳过sql thread 报错的GTID
mysql> STOP SLAVE;
mysql> SET SESSION GTID_NEXT = ‘7a07cd08-ac1b-11e2-9fcf-0010184e9e08:1131′;
mysql> BEGIN; COMMIT;
mysql> SET SESSION GTID_NEXT = AUTOMATIC;
mysql> START SLAVE;


限制
GTID依附于事务，
1 更新非事务引擎
非事务引擎单条DML被视为一个事务，倘若在一个事务中和innodb混合使用，可能导致单条事务生成多个GTID；
2 create table … select
若采用row-based，该sql常常被分解成两个独立事件：a 创建表；b 插入数据；
事务可能会为这两个事件分配同一个GTID，导致slave把后面的insert忽略；
3 临时表
手工创建的临时表应该独立于任何事务之外(autocommit = 1)；
4 不支持sql_slave_skip_counter
slave若要跳过事务，需设置gtid_executed或gtid_next；
5 mysql_upgrade
其会更新系统表(MyISAM)，因此使用时须设置—gtid-mode=off，或者—write-binlog=off(5.6.7默认开启)；

相关函数：
GTID_SUBSET()
GTID_SUBTRACT()

资源：
http://www.tuicool.com/articles/NjqQju
http://mysqllover.com/?p=594

-------------------------------------------------------------------------------------------------------------
复制：

过滤
How do I prevent GRANT and REVOKE statements from replicating to slave machines?
Start the server with the --replicate-wild-ignore-table=mysql.% option to ignore replication for tables in the mysql database.



半同步复制
semisynchronous replication works best for close servers communicating over fast networks, 
and worst for distant servers communicating over slow networks.

it is important to monitor the rpl_semi_sync_master_status status variable to disable semisynchronous replication in case of a timeout.
The value is OFF if the plugin is not enabled or the master has fallen back to asynchronous replication due to commit acknowledgment
timeout. 

配置：
To use semisynchronous replication,
have_dynamic_loading system variable is YES. Binary distributions should support dynamic loading.
Replication must already be working. 

（
除了这样install插件外，还可以在启动文件my.cnf里通过plugin-load参数指定启动数据库时直接载入插件，例如：
plugin-load = "rpl_semi_sync_master=semisync_master.so;rpl_semi_sync_slave=semisync_slave.so"
）
INSTALL PLUGIN rpl_semi_sync_master SONAME 'semisync_master.so';
INSTALL PLUGIN rpl_semi_sync_slave SONAME 'semisync_slave.so';

To see which plugins are installed, use the SHOW PLUGINS statement,
 or query the INFORMATION_SCHEMA.PLUGINS table.
 
 show global variables like "%rpl_semi%";   查看是否开启
 如果是线上异步复制改半同步的情况，使用以下命令过程
 mysql> SET GLOBAL rpl_semi_sync_master_enabled = {0|1};
mysql> SET GLOBAL rpl_semi_sync_master_timeout = N;The default value is 10000 (10 seconds).

mysql> SET GLOBAL rpl_semi_sync_slave_enabled = {0|1};
mysql> STOP SLAVE IO_THREAD; START SLAVE IO_THREAD;

最后在主从库上分别执行以下命令验证配置是否生效：
SHOW STATUS LIKE 'Rpl_semi_sync%';
monitor the Rpl_semi_sync_master_status status variable to determine whether the master currently 
is using asynchronous or semisynchronous replication.



crash-safe复制：
解决master.info文件和relay-log.info文件。非同步刷盘问题,每当系统发生crash,存储的偏移量可能都不准确.（同步刷盘性能接受不了）
使用以下配置，将执行事务和记录偏移量放入同一个事务中：
relay-log-info-repository      = TABLE
relay_log_recovery             = 1
master_info_repository         = TABLE



-----------------------------------------------------------------------------------------------------------------------------------------
多源复制：

命令使用：
FOR CHANNEL channel_name option for use with the following in managing a replication channel independently of other channels:

CHANGE MASTER TO：
to add a new master with the host name master1 using port 3451 to a channel called master-1:
CHANGE MASTER TO MASTER_HOST='master1', MASTER_USER='rpl', MASTER_PORT=3451, MASTER_PASSWORD='', \
MASTER_AUTO_POSITION = 1 FOR CHANNEL 'master-1';

START SLAVE：
START SLAVE thread_types;
START SLAVE thread_types FOR CHANNEL channel;

STOP SLAVE：
STOP SLAVE thread_types;
STOP SLAVE thread_types FOR CHANNEL channel;

RESET SLAVE：
RESET SLAVE;
RESET SLAVE FOR CHANNEL channel;

SHOW RELAYLOG EVENTS
FLUSH RELAY LOGS
SHOW SLAVE STATUS




SHOW RELAYLOG EVENTS
CHANGE MASTER TO
MASTER_POS_WAIT()
WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS()
WAIT_FOR_EXECUTED_GTID_SET()
这五个，必须指定FOR CHANNEL channel_name option

Similarly, an additional channel_name parameter is introduced for the following functions:
MASTER_POS_WAIT()
WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS()

Beginning with MySQL 5.7.9, the following statements are disallowed for the group_replication_recovery channel.
START SLAVE
STOP SLAVE
---------------------------------------------------
配置及参数：

--relay-log-info-repository
This must be set to TABLE. 
--master-info-repository
This must be set to TABLE.

The following startup options now affect all channels in a replication topology.
--log-slave-updates
--relay-log-purge
--slave_transaction_retries
--skip-slave-start
--slave-skip-errors

---------------------------------------------------
状态监控：

 SHOW SLAVE STATUS （FOR CHANNEL channel_name）

use the replication Performance Schema tables to monitor channels：
SELECT * FROM replication_connection_status\G;
SELECT * FROM replication_connection_status WHERE channel_name='master1'\G




多线程复制：



-------------------------------------------------------------------------------------------------------------
shard方案：

只需要记录读走后的新更改即可（可使用存储过程，触发器等内部辅助工具）（原理类似facebook的online ddl，以及xtrabackup）
xtrabackup原理：
因为备份时 FTWRL（FLUSH TABLES WITH READ LOCK） 后，数据库是处于只读的，非 InnoDB 数据是在持有全局读锁情况下拷贝的，
所以非 InnoDB 数据本身就对应 FTWRL 时间点；InnoDB 的 ibd 文件拷贝是在 FTWRL 前做的，拷贝出来的不同 ibd 文件最后更新时间点是不一样的，
这种状态的 ibd 文件是不能直接用的，但是 redo log 是从备份开始一直持续拷贝的，最后的 redo 日志点是在持有 FTWRL 后取得的，
所以最终通过 redo 应用后的 ibd 数据时间点也是和 FTWRL 一致的。

xtrabackup原理三个关键点，FTWRL，redo log，ibd文件拷贝。那么在做逻辑sharding时，
1,select数据（对应xtrabackup的ibd文件拷贝）前就要记录新的更改（对应xtrabackup里的redo log，可用触发器实现）
2,select数据
3,select数据完成后，加读锁（对应xtrabackup的FTWRL），这时没有了新的更改，所有select时的更改都已取得，
4，释放读锁，将取得的所有更改应用于select出的数据(可用REPLACE INTO实现)。
这样，和加读锁时间一致的sharding数据就取得了。


整个sharding步骤：
（根据线上负载，灵活运用，如果负载低，表t数据量小，直接使用导出方式，如果负载高，数据量大，就用分批select方式。必要时可以停服）
假设sharding成3份，则需要5台服务器。其中a为线上主库，b为线上从库，c,d,e为sharding后的数据服务器，假设sharding表t
1，在b服务器上建立表t10,t11,t12,并在表t上建立三个增删改触发器同步新更改数据到t10,t11,t12.
2，在b上从表t 分批select数据并取模到表t0,t1,t2（如果用导出方式，可再新开一个实例，dump数据时使用--dump-slave）
3，select数据完成后，关闭b从a的复制
4，将t10,t11,t12中的新更改数据分别应用到t0,t1,t2
5,开启b从a的复制，此时主库a服务器上的表t的新更改，通过复制到b服务器的表t，又通过b服务器上的触发器同步到b服务器上的表t0,t1,t2
6,做c,d,e从b部分复制，c复制t0，d复制t1,e复制t2
7,此时，主库a，与c,d,e已经同步，应用发布下代码，将数据库连接指向c,d,e即可

sharding触发器：
    DELIMITER $ 
     
    USE `test`$ 
     
    DROP TRIGGER /*!50032 IF EXISTS */ `t_insert`$ 
     
    CREATE 
        /*!50017 DEFINER = 'admin'@'%' */ 
        TRIGGER `t_insert` AFTER INSERT ON `t`  
        FOR EACH ROW BEGIN 
        DECLARE v_result INT; 
        SET v_result=MOD(new.id,3); 
        IF v_result = 0 THEN 
          INSERT INTO t0(id,NAME,age,address) VALUES(new.id,new.name,new.age,new.address); 
        ELSEIF v_result = 1 THEN 
          INSERT INTO t1(id,NAME,age,address) VALUES(new.id,new.name,new.age,new.address); 
        ELSE 
          INSERT INTO t2(id,NAME,age,address) VALUES(new.id,new.name,new.age,new.address); 
        END IF; 
        END; 
    $ 
     
    DELIMITER ; 
     
     
    /*============================================*/ 
     
    DELIMITER $ 
     
    USE `test`$ 
     
    DROP TRIGGER /*!50032 IF EXISTS */ `t_update`$ 
     
    CREATE 
        /*!50017 DEFINER = 'admin'@'%' */ 
        TRIGGER `t_update` AFTER UPDATE ON `t`  
        FOR EACH ROW BEGIN 
        DECLARE v_result INT; 
        SET v_result=MOD(new.id,3); 
        IF v_result = 0 THEN 
          REPLACE INTO t0(id,NAME,age,address) VALUES(new.id,new.name,new.age,new.address); 
        ELSEIF v_result = 1 THEN 
          REPLACE INTO t1(id,NAME,age,address) VALUES(new.id,new.name,new.age,new.address); 
        ELSE 
          REPLACE INTO t2(id,NAME,age,address) VALUES(new.id,new.name,new.age,new.address); 
        END IF; 
        END; 
    $ 
     
    DELIMITER ; 
     
     
    /*============================================*/ 
     
    DELIMITER $ 
     
    USE `test`$ 
     
    DROP TRIGGER /*!50032 IF EXISTS */ `t_delete`$ 
     
    CREATE 
        /*!50017 DEFINER = 'admin'@'%' */ 
        TRIGGER `t_delete` AFTER DELETE ON `t`  
        FOR EACH ROW BEGIN 
        DECLARE v_result INT; 
        SET v_result=MOD(old.id,3); 
        IF v_result = 0 THEN 
          DELETE FROM t0 WHERE id = OLD.id; 
        ELSEIF v_result = 1 THEN 
          DELETE FROM t1 WHERE id = OLD.id; 
        ELSE 
          DELETE FROM t2 WHERE id = OLD.id; 
        END IF; 
        END; 
    $ 
     
    DELIMITER ; 

双写


-------------------------------------------------------------------------------------------------------------
online ddl
一，5.6版本能支持的部分
二，ddl工具，facebook的，percona的
三，添加，删除索引，先在离线从库做，然后流量切换，再在另外一台机器做


-------------------------------------------------------------------------------------------------------------------
查询:

如果平时sql不会产生慢查询（很好的走了索引），那么很可能就是突然的并发导致了sql变慢，因为资源的争抢，比如CPU等待，锁等待，IO等待
大事务容易产生锁等待，排序去重的cpu密集操作容易导致cpu等待，大量随机读容易导致IO等待
那么事情的关键点就在于为什么会有突然的并发了

大事务，大sql，慢sql的危害：
慢sql无论在上线前和上线后，都是一定要干掉的。
锁等待会拖慢整个整个系统。
锁等待会拖慢备份。（备份在低峰做）
大事务，大sql增加锁等待时间。锁等待时间加大，1，导致set global read_only hang住（“set global read_only=1”这个命令实际上也和FTWRL类似，
也需要上两把MDL，只是不需要清理表缓存而已）。2，导致FLUSH TABLES WITH READ LOCK hang住。这两个hang住，导致后边排队的锁都获取不到，以致
服务不可用。


松散索引扫描：
mysql目前 5.6版本，还不能很好的支持松散索引扫描。所以，两个技巧，一是尽量把范围查询放索引的最后面。二，利用in将范围查询转化成in查询
-----------------------------------------------------------------------------------------------------------------------

隐式提交与显式提交，隐式加锁与显式加锁：


-------------------------------------------------------------------------------------------------------------------------
json数据类型：
使用虚拟列构建json里面key的索引，A secondary index may be created on one or more virtual columns or on a combination of
virtual columns and non-generated virtual columns. Secondary indexes on virtual columns may be defined as UNIQUE.

------------------------------------------------------------------------------------------------------------------------
HA:
中间件自己的HA怎么做？
中间件如何改变DB访问方式：
http://www.infoq.com/cn/presentations/mysql-high-availability-architecture-exploration-based-on-pxc/
http://www.infoq.com/cn/presentations/distributed-database-and-anti-paradigm-design/







关于set global sql_slave_skip_counter=N 命令的一些点
1、set global sql_slave_skip_counter=N中的N是指跳过N个event
   2、最好记的是N被设置为1时，效果跳过下一个事务。
   3、跳过第N个event后，位置若刚好落在一个事务内部，则会跳过这整个事务
   4、一个insert/update/delete不一定只对应一个event，由引擎和日志格式决定
