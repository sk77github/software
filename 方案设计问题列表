并发，性能（响应时间，同步复制响应时间很长，降低并发，但并发可通过sharding分担），分区容忍，一致性，可用性
容量规划，sharding，成本（如果机器足够多，内存足够大，使用共享存储，多机房多活，sharding的足够细，这些成本可接受，
那么把容量规划到始终留有大的余地，这样上面第一行的所有问题，都可解决）


容量规划，健康巡检


数据是否允许丢失？
业务读写比是怎样的？
业务需要事务吗？
业务高峰有多大并发？（落实到qps，tps，iops）
业务吞吐量怎样？（每秒或每天写入多少行，多少M。用户在什么场景下触发（场景结合宏观埋点数据））
业务需要的响应时间是多长？
业务数据需要强一致性吗？
业务需要高可用吗？（可用性要求）
业务可以异步展示，最终一致吗？（一致性要求）
业务需要多大的磁盘存储空间？
业务热点数据有多大？（需要多大缓存和多大内存）
业务可根据时间归档吗？
业务要求一定要串行执行吗？
业务有大sql吗？有大事务吗？有大字段吗？单表数据量多少性能最好，不要搞成大表，包括行数太多。存储空间太大（缓存效果不好）
业务时间维度的度量要求（一共有多少资源要跑，每秒有多少什么操作，需要多长时间内完成）

业务的常规读，会影响多少行数据
业务的常规写，会影响到多少行数据


架构及sql要上线时，需要压测（模拟线上环境），压测取出相关的性能数据（就是说要了解架构及sql的行为）。结合现有容量规划进行评估，使用。
