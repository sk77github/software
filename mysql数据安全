sync_binlog = 1
innodb_flush_log_at_trx_commit = 1 
innodb_support_xa=1


很显然，如果我们弱化配置的持久性(innodb_flush_log_at_trx_commit != 1 或者 sync_binlog != 1)， 宕机可能导致两种丢数据的场景：

引擎层提交了，但binlog没写入，备库丢事务；
引擎层没有prepare，但binlog写入了，主库丢事务。


即使我们将参数设置成innodb_flush_log_at_trx_commit =1 和 sync_binlog = 1，也还会面临这样一种情况：主库crash时还有binlog没传递到备库，
如果我们直接提升备库为主库，同样会导致主备不一致，老主库必须根据新主库重做，才能恢复到一致的状态。针对这种场景，
我们可以通过开启semisync的方式来解决，一种可行的方案描述如下：

设置双1强持久化配置;
我们将semisync的超时时间设到极大值，同时使用semisync AFTER_SYNC模式，即用户线程在写入binlog后，引擎层提交前等待备库ACK；
基于步骤1的配置，我们可以保证在主库crash时，所有老主库比备库多出来的事务都处于prepare状态；
备库完全apply日志后，记下其执行到的relay log对应的位点，然后将备库提升为新主库；
将老主库的最后一个binlog进行截断，截断的位点即为步骤3记录的位点;
启动老主库，那些已经传递到备库的事务都会提交掉，未传递到备库的binlog都会回滚掉。


InnoDB is a transaction-safe (ACID compliant) storage engine for MySQL that has commit, rollback, and crash-recovery capabilities to
protect user data. However, it cannot do so if the underlying operating system or hardware does not work as advertised. Many operating 
systems or disk subsystems may delay or reorder write operations to improve performance. On some operating systems, the very fsync() 
system call that should wait until all unwritten data for a file has been flushed might actually return before the data has been flushed
to stable storage. Because of this, an operating system crash or a power outage may destroy recently committed data, or in the worst case,
even corrupt the database because of write operations having been reordered. If data integrity is important to you, perform some
“pull-the-plug” tests before using anything in production. On OS X 10.3 and higher, InnoDB uses a special fcntl() file flush method. 
Under Linux, it is advisable to disable the write-back cache.

On ATA/SATA disk drives, a command such hdparm -W0 /dev/hda may work to disable the write-back cache. Beware that some drives or disk 
controllers may be unable to disable the write-back cache.

With regard to InnoDB recovery capabilities that protect user data, InnoDB uses a file flush technique involving a structure called the
doublewrite buffer, which is enabled by default (innodb_doublewrite=ON). The doublewrite buffer adds safety to recovery following a crash
or power outage, and improves performance on most varieties of Unix by reducing the need for fsync() operations. It is recommended that 
the innodb_doublewrite option remains enabled if you are concerned with data integrity or possible failures. For additional information 
about the doublewrite buffer,
