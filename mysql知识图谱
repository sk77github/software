所谓innodb行锁，是针对有索引的语句，如果语句没有使用上索引，那么就会变成无索引退化，对于当前读就会变成表锁。


快照读，当前读

快照读：就是select
select * from table ....;
当前读：特殊的读操作，插入/更新/删除操作，属于当前读，处理的都是当前的数据，需要加锁。
select * from table where ? lock in share mode;(sets an IS lock)
select * from table where ? for update;(sets an IX lock)
insert;
update ? where ?;
delete ? where ?;
事务的隔离级别实际上都是定义了当前读的级别

对于当前读：
序列化
幻读（如果只有幻读，那么就已经可重复读）
可重复读
不可重复读
脏读






事务，事务的隔离级别涉及锁，事务的实现方式MVCC与两阶段锁

锁，innodb行锁，非锁定一致性读

autocommit = 1，使每一个语句都成为一个事务。If a statement returns an error, the commit or rollback behavior depends on the error：
http://dev.mysql.com/doc/refman/5.6/en/innodb-transaction-model.html
autocommit = 0, commit或者rollback后，会自动又开启一个事务，就是说当前session始终有事务打开

自动提交情况下，如果想用多条语句事务，可以使用 start transaction 或者 begin 结束时或者commit或者rollback。
commit和rollback会释放当前session持有的所有锁



事务隔离级别（要从当前事务和其他事务两个角度考虑，而且要有时序图与锁的想象，因为隔离级别通过锁实现）：

SERIALIZABLE        
从MVCC并发控制退化为基于锁的并发控制。不区别快照读与当前读，所有的读操作均为当前读，读加读锁 (S锁)，写加写锁 (X锁)。读写互斥。
READ UNCOMMITTED    未提交，当前session可读？其他session可读？
脏读，不可重复读，幻读
READ COMMITTED      未提交不可读，只能读已提交
不可重复读，幻读
REPEATABLE READ     
可重复读，需要用next-key解决幻读






锁：
record lock
gap lock
next key lock
行锁防止别的事务修改或删除，GAP锁防止别的事务新增，行锁和GAP锁结合形成的的Next-Key锁共同解决了RR级别的幻读问题。

共享锁  也叫S锁  也叫读锁
排他锁  也叫X锁  也叫写锁
意向锁  包括IS锁与IX锁














mysql index condition pushdow


MySQL Fabric



GTID

