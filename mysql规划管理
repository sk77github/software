管理准则：
数据安全（账号管理，网络管理，安全管理等）
备份与还原（备份策略，还原策略，定期演练，备份可用）
自动化（安装，搭建，审核（表设计与sql优化））
监控（容量规划），报警（故障排除）
HA
架构设计（集群，复制拓扑，中间件，表设计，容量预估）

机群扩容(基本就是加机器，数据什么的如何自动迁移？)
压力测试(线上流量回放，应用压测...)
性能优化
负载平衡，热点消除

--------------------------------------------------------------------------------------------
业务规划：

先从业务划分，划分出，一个个不同业务的数据库集群边界。

这些集群中，都使用了什么样的硬件机器配置，这些硬件机器是否有监控

硬件机器上有几个mysql实例

集群中mysql实例都使用了什么版本的mysql（同时要很清楚不同版本mysql的差异和限制）
集群中的mysql使用的配置文件在什么位置，配置文件内的配置参数都是什么样的,这里要注意的参数很多，
比如，使用什么存储引擎，什么样的事务隔离级别，是否开启了binlog，访问端口是什么
这些参数分setup options，和 system variables

集群中的复制拓扑是什么样的

集群的访问帐号分布是什么样的（root帐号，只读账户，程序帐号，复制帐号，这些帐号都允许哪个机器哪个网段访问）

集群中有哪些表，这些表之间的关联是什么样的，都提供了什么业务实现。这些表上都有哪些索引。
集群中都有哪些sql在运行

以上这些，最好要有一个web界面可以访问查询（使用后台脚本自动更新这些数据，然后入某个存储，然后展示到web界面就好）
这样做的目的：
一，是变更可控，因为事故往往发生在变更的时候

如何通过ansible等自动化工具，如何通过开源web管理工具，开源审核工具等来进行自动化管理


-------------------------------------------------------------------------------------------------------
mysql强制约定：

1，从库不可写，不给与配置写入帐号


-----------------------------------------------------------------------------------------------------------
自动化：

单一主控机(主控机有ha)+多工作机(many workers，mysql服务器)模式，worker实现数据的存储、读写、分析处理等，主控机保存元数据、
实现worker的安装，搭建，审核，任务分配、状态监控、负载平衡、故障监测和故障恢复等。

机器如何自动上下线？数据如何自动sharding？负载如何自平衡？如何错误检测，自动再读取另一个slave？

当某个slave失效后，主控机会在适当的时机启动新复制，使得数据的副本数保持设定的数量，保证了数据的安全；同样的通过MHA等机制HA后，
slave提升为了master，少了一个slave，也要在适当时机做一个新的slave


----------------------------------------------------------------------------------------------------------------
压力测试：
http://lxy2330.iteye.com/blog/1570312
