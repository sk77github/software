管理准则：
数据安全（账号管理，网络管理，安全管理等）
备份与还原（备份策略，还原策略，定期演练，备份可用）
自动化（安装，搭建，审核（表设计与sql优化））
监控（容量规划），报警（故障排除）
HA
架构设计（集群，复制拓扑，中间件，表设计，容量预估）

机群扩容(基本就是加机器，数据什么的如何自动迁移？)
压力测试(线上流量回放，应用压测...)
性能优化
负载平衡，热点消除

并发，性能（响应时间，同步复制响应时间很长，降低并发，但并发可通过sharding分担），分区容忍，一致性，可用性
容量规划，sharding，成本（如果机器足够多，内存足够大，使用共享存储，多机房多活，sharding的足够细，这些成本可接受，
那么把容量规划到始终留有大的余地，这样上面第一行的所有问题，都可解决）

--------------------------------------------------------------------------------------------
业务规划：

先从业务划分，划分出，一个个不同业务的数据库集群边界。

这些集群中，都使用了什么样的硬件机器配置，这些硬件机器是否有监控

硬件机器上有几个mysql实例

集群中mysql实例都使用了什么版本的mysql（同时要很清楚不同版本mysql的差异和限制）
集群中的mysql使用的配置文件在什么位置，配置文件内的配置参数都是什么样的,这里要注意的参数很多，
比如，使用什么存储引擎，什么样的事务隔离级别，是否开启了binlog，访问端口是什么
这些参数分setup options，和 system variables

集群中的复制拓扑是什么样的

集群的访问帐号分布是什么样的（root帐号，只读账户，程序帐号，复制帐号，这些帐号都允许哪个机器哪个网段访问）

集群中有哪些表，这些表之间的关联是什么样的，都提供了什么业务实现。这些表上都有哪些索引。
集群中都有哪些sql在运行

以上这些，最好要有一个web界面可以访问查询（使用后台脚本自动更新这些数据，然后入某个存储，然后展示到web界面就好）
这样做的目的：
一，是变更可控，因为事故往往发生在变更的时候

如何通过ansible等自动化工具，如何通过开源web管理工具，开源审核工具等来进行自动化管理


-------------------------------------------------------------------------------------------------------
mysql强制约定：

1，从库不可写，不给与配置写入帐号


-----------------------------------------------------------------------------------------------------------
自动化：
http://mysql.taobao.org/index.php?title=MySQL%E5%B9%B3%E5%8F%B0%E5%8C%96

单一主控机(主控机有ha)+多工作机(many workers，mysql服务器)模式，worker实现数据的存储、读写、分析处理等，主控机保存元数据、
实现worker的安装，搭建，审核，任务分配、状态监控、负载平衡、故障监测和故障恢复等。

机器如何自动上下线？数据如何自动sharding？负载如何自平衡？如何错误检测，自动再读取另一个slave？

当某个slave失效后，主控机会在适当的时机启动新复制，使得数据的副本数保持设定的数量，保证了数据的安全；同样的通过MHA等机制HA后，
slave提升为了master，少了一个slave，也要在适当时机做一个新的slave


----------------------------------------------------------------------------------------------------------------
压力测试：
http://lxy2330.iteye.com/blog/1570312

----------------------------------------------------------------------------------------------------------------
并发，性能（响应时间，同步复制响应时间很长，降低并发，但并发可通过sharding分担），分区容忍，一致性，可用性
http://www.infoq.com/cn/articles/cap-twelve-years-later-how-the-rules-have-changed
http://hedengcheng.com/?p=892

强一致下的可用性：
当出现故障不可用时，主机需要多长时间重启恢复服务，或者需要多长时间把服务转移到另一台备用机器提供服务。这个时间越短，服务可用性越高。


强一致性：
1，事务ACID
2，数据库领域经常采用共享存储来解决强一致性问题，主库将redo日志持久化到共享存储，如果主库故障，假设共享存储是持续可用的，
备库可以从共享存储中读取日志恢复系统。
3，binlog放到共享存储

高可用性：
金融业务。前提是要满足强一致性。如果没有强一致性，暂时不可用也没关系。


强一致性与响应时间：
对于银行这样严格要求强一致性的应用，对于写入延迟一般没什么要求（延迟几个小时都可以，数据不出错就行），可以适用完全同步的模式。是这样吗？





强一致性与业务架构设计：
read-your-write 是为了规避主从延迟的
一个连接  如果有写操作（写到主库） 那么这个连接的下一个读操作 仍去主库读

A写数据nB读数据n  这样的也是个问题   A写主 B读从  主从有延迟 数据就不一致

一个连接  如果有写操作（写到主库） 那么这个连接的下一个读操作 仍去主库读
同一个非只读事务，强制落到主库执行 也是一个解决方法  但性能瓶颈就在主库的TPS了

为了解决读写分离存在写完马上就想读而这时可能存在主从同步延迟的情况，Altas中可以在SQL语句前增加 /*master*/ 就可以将读请求强制发往主库。







实际上业务上往往会组合使用各种柔性解决方案，例如，
涉及到钱的业务停服务，
其它业务容忍极端情况下的数据丢失；
或者在外部系统中记录一些信息，例如记录哪些用户的数据不一致，出现问题是禁止这些用户的写服务，其它用户正常提供服务；
或者DBA采用各种办法补数据，等等。

---------------------------------------------------------------------------------------------------------------------------
扩容，缩容
同步数据同步，异步数据同步


-----------------------------------------------------------------------------------------------------------------------
mysql云数据库

参考：
京东            JMySQL
Facebook        MPS系统，即“MySQL Pool Scanner”
腾讯计费平台部  TDSQL
阿里            DRDS（还有其他很多组件）

云计算现在是各大IT公司内部作为节约成本的一个突破口，对于数据存储的mysql来说，如何让其成为一个saas（Software as a Service）是关键点。在MS的官方文档中，把构建一个足够成熟的SAAS(MS简单列出了SAAS应用的4级成熟度)所面临的3个主要挑战：可配置性，可扩展性，多用户存储结构设计称为"three headed monster". 可配置性和多用户存储结构设计在Mysql saas这个问题中并不是特别难办的一件事情，所以这里重点说一下可扩展性。

Mysql作为一个saas服务，在架构演变为V4.0之后，依赖良好的sharding key设计, 已经不再存在扩展性问题，只是他在面对扩容缩容时，有一些脏活需要干，而作为saas,并不能避免扩容缩容这个问题，所以只要能把V4.0的脏活变成 1. 扩容缩容对前端APP透明(业务代码不需要任何改动)  2.扩容缩容全自动化且对在线服务无影响 那么他就拿到了作为Saas的门票.



对于架构实现的关键点，需要满足对业务透明，扩容缩容对业务不需要任何改动，那么就必须eat our own dog food，在你mysql saas内部解决这个问题，一般的做法是我们需要引入一个Proxy,Proxy来解析sql协议，按sharding key 来寻找cluster, 判断是读操作还是写操作来请求主 或者 从，这一切内部的细节都由proxy来屏蔽。
这里借淘宝的图来列举一下proxy需要干哪些事情



百度公开的技术方案中也有类似的解决方案，见文章最后资料部分链接


对于架构实现的关键点，扩容缩容全自动化且对在线服务无影响； 扩容缩容对应到的数据操作即为数据拆分和数据合并，要做到完全自动化有非常多不同的实现方式，总体思路和V4.0介绍的瓶颈部分有关，目前来看这个问题比较好的方案就是实现一个伪装slave的sync slave, 解析mysql同步协议，然后实现数据拆分逻辑，把全量数据进行拆分。具体架构见下图：



其中Sync slave对于Original Master来说，和一个普通的Mysql Slave没有任何区别，也不需要任何额外的区分对待。需要扩容/缩容时，挂上一个Sync slave,开始全量同步+增量同步，等待一段时间追数据。以扩容为例，若扩容后的服务和扩容前数据已经基本同步了，这时候如何做到切换对业务无影响？ 其实关键点还是在引入的proxy,这个问题转换为了如何让proxy做热切换后端的问题。这已经变成一个非常好处理的问题了.

另外值得关注的是：2014年5月28日——为了满足当下对Web及云应用需求，甲骨文宣布推出MySQL Fabric，在对应的资料部分我也放了很多Fabric的资料，有兴趣的可以看看，说不定会是以后的一个解决云数据库扩容缩容的手段
