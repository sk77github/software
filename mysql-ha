binlog server（共享存储？）+ Semi-Synchronous Replication  +   GTID   + MHA  + LVS + Keeplived + 中间件（读写分离，水平分表）
怎么搞分布式事务？

---------------------------------------------------------------------------------------------------------
分布式环境判断的推模式与拉模式：
MHA属于拉模式，mha要获取mysql master的信息。
zookeeper（分布式锁）属于推模式，mysql或者其他软件需要向zookeeper注册，抢锁。（分布式锁服务实现主节点选举大致如下：
主节点和备节点到Chubby中抢锁，抢到锁的节点在锁的有效期(Lease期)内提供服务，当主节点锁的Lease快要到期时，主节点申请延长锁的超时时间，
正常情况下分布式锁服务总是优先满足主节点的请求，当主节点出现故障时，备节点能够抢到锁切换为主节点提供服务。
）


云计算系统常常是单一主控机(single master)+多工作机(many workers)模式，worker实现数据的存储、读写、分析处理等，
master保存部分或全部元数据、实现worker的任务分配、状态监控、负载平衡、故障监测和故障恢复等。Master常常使用heartbeat+lease或类似机制
监控worker的状态，向worker定期发放lease，worker在lease有效期(例如几秒到几十秒)内才进行工作，lease失效后则停止工作。
如果master发现某个worker在过去一段时间内没有响应或者出现其他异常，则不再向该worker发放新的lease，并在旧的lease到期后重新分配
该worker上的任务。这使得master得以发现有故障的worker并将其从系统中剔除，并在适当的时候采取措施以避免数据丢失或者任务失败等等，
也使得系统管理员不需要进行任何额外的操作就可以下线部分worker(例如机器维护、软件硬件升级、机器淘汰等等)。如果没有其他措施，则云计算系统
的单一master会成为整个系统的单点。为了避免这种现象的出现，云计算系统通常还有一个分布式选举系统(例如Google的Chubby，开源实现zookeeper)，
master也不再是单一master，而是单一主master+几个辅master，辅master保持着对主master的准同步，一旦主master故障，
则其中一个辅master会被选举并升级成为主master。这种选举和升级通常需要若干秒的时间，但由于worker在lease有效期内即使没有master
也会继续工作，且应用程序对master的访问通过名字而不是IP地址，因此上层应用程序通常看不到这种切换，或者是一个短暂的停顿。



-------------------------------------------------------------------------------------------------------------------------
MHA:
When you add/remove slaves, you should update the config file and had better restart MHA.需要调整的项:
secondary_check_script


to avoid split brain：
1，Power off the dead master
参数：shutdown_script
2，
参数：secondary_check_script
例子：secondary_check_script=masterha_secondary_check -s remote_host1 -s remote_host2
https://github.com/matthewbogner/mysql-master-ha/issues/92
by setting -s remote_host1. In that case MHA fails to connect to the remote host and 
does not start failover. Failover does not start, but this is much better than split brain.
tips： remote_host1 and remote_host2 should be located on different network segments from MHA Manager and MySQL servers.
如何避免脑裂：
当MHA Manager检测master失败后，不会立即判断该master已宕机（需要多个网络路由验证），而是通过ssh到secondary_check_script定义的主机再次
进行检测失败后，方可认为master无法响应。这从一定程度上也防止脑裂的现象出现。





By default, masterha_manager runs in foreground. You can run the masterha_manager program in background as below.
  manager_host$ nohup masterha_manager --conf=/etc/app1.cnf < /dev/null > /var/log/masterha/app1/app1.log 2>&1 &
Set nohup, and make sure that masterha_manager does not read/write from/to STDIN, STDOUT and STDERR.



If you create a file at /etc/masterha_default.cnf, MHA Manager scripts automatically reads the file as a global configuration file.
Application-scope parameters should be written in [server default] block. In [serverN] blocks, you should set local-scope parameters.
hostname is mandatory local-scope parameter so has to be written here. Block name should start from "server". 
Internally server configurations are sorted by block name, and sorted order matters when MHA decides new master


----------------------------------------------------------------------------------------------------------------------------------


角色：

192.168.1.2            lvs backup
192.168.1.4            lvs master
192.168.1.8            atlas2
192.168.1.10           atlas1
192.168.1.11           mysql slave2
192.168.1.12           mysql slave1
192.168.1.13           mysql maser
192.168.1.14           mha manger


配置ssh无密码登录，192.168.1.14到所有机器，以便mha和ansible使用。

1,安装perl mysql 
yum install perl-DBD-MySQL -y

2，安装mha
mha4mysql-node-0.54-0.el6.noarch.rpm
mha4mysql-manager-0.55-0.el6.noarch.rpm 
需要的perl依赖：
yum install perl-Time-HiRes.x86_64 perl-Parallel-ForkManager.noarch perl-Log-Dispatch-FileRotate.noarch perl-Log-Dispatch-Configurator-Any.noarch perl-Log-Dispatch-Array.noarch perl-Log-Dispatch.noarch perl-Log-Dispatch-Perl.noarch perl-Log-Dispatch-Config.noarch perl-Config-Tiny.noarch

3，配置各mysql机器 ssh无密码登录

4，搭建mysql复制拓扑


下载资源 ：
http://www.chocolee.cn/download/mha/
